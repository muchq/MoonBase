syntax = "proto3";

package golf_grpc;

import "protos/cards/cards.proto";

service Golf {
  rpc RegisterUser (RegisterUserRequest) returns (RegisterUserResponse) {}
  rpc NewGame (NewGameRequest) returns (NewGameResponse) {}
  rpc JoinGame (JoinGameRequest) returns (JoinGameResponse) {}
  rpc Peek (PeekRequest) returns (PeekResponse) {}
  rpc DiscardDraw (DiscardDrawRequest) returns (DiscardDrawResponse) {}
  rpc SwapForDraw (SwapForDrawRequest) returns (SwapForDrawResponse) {}
  rpc SwapForDiscard (SwapForDiscardRequest) returns (SwapForDiscardResponse) {}
  rpc Knock (KnockRequest) returns (KnockResponse) {}
}

message RegisterUserRequest {
  string user_id = 1;
}

message RegisterUserResponse {
}

message NewGameRequest {
  string user_id = 1;
  int32 number_of_players = 2;
}

message NewGameResponse {
  GameState game_state = 1;
}

message JoinGameRequest {
  string user_id = 1;
  string game_id = 2;
}

message JoinGameResponse {
  GameState game_state = 1;
}

message PeekRequest {
  string user_id = 1;
  string game_id = 2;
}

message PeekResponse {
  GameState game_state = 1;
}

message DiscardDrawRequest {
  string user_id = 1;
  string game_id = 2;
}

message DiscardDrawResponse {
  GameState game_state = 1;
}

enum Position {
  TOP_LEFT = 0;
  TOP_RIGHT = 1;
  BOTTOM_LEFT = 2;
  BOTTOM_RIGHT = 3;
}

message SwapForDrawRequest {
  string user_id = 1;
  string game_id = 2;
  Position position = 3;
}

message SwapForDrawResponse {
  GameState game_state = 1;
}

message SwapForDiscardRequest {
  string user_id = 1;
  string game_id = 2;
  Position position = 3;
}

message SwapForDiscardResponse {
  GameState game_state = 1;
}

message KnockRequest {
  string user_id = 1;
  string game_id = 2;
}

message KnockResponse {
  GameState game_state = 1;
}

message VisibleHand {
  cards_proto.Card bottom_left = 1;
  cards_proto.Card bottom_right = 2;
}

message GameState {
  bool all_here = 1;
  int32 discard_size = 2;
  int32 draw_size = 3;
  string game_id = 4;
  string version = 5;
  bool game_started = 6;
  bool game_over = 7;
  optional string knocker = 8;
  optional VisibleHand hand = 9;
  int32 number_of_players = 10;
  repeated string players = 11;
  repeated int32 scores = 12;
  optional cards_proto.Card top_discard = 13;
  optional cards_proto.Card top_draw = 14;
  bool your_turn = 15;
  string current_player_id = 16;
}

message ErrorResponse {
  string message = 1;
}

message ResponseWrapper {
  optional int32 id = 1;
  oneof kind {
    GameState game_state = 2;
    ErrorResponse error = 3;
  }
}
